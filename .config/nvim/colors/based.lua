--  About: based, consistency is not something you find in vim/nvim.
--  When will they stop breaking the highlighting? >:(

vim.cmd.highlight('clear')
vim.g.colors_name = 'b'

local hi = function(name, val)
    val.force = true

    val.cterm = val.cterm or {}

    vim.api.nvim_set_hl(0, name, val)
end

-- General
hi('Normal', {})

hi('Conceal', { fg = 'LightGrey', bg = 'DarkGrey', ctermfg = 'LightGrey', ctermbg = 'DarkGrey' })
hi('Cursor', {})
hi('lCursor', {})
hi('DiffText', { bg = 'Red', bold = true, ctermbg = 'Red', cterm = { bold = true } })
hi('ErrorMsg', { ctermfg = 1, ctermbg = nil })
hi('IncSearch', { ctermbg = nil, reverse = true, cterm = { reverse = true } })
hi('ModeMsg', { ctermfg = 7 })
hi('NonText', { ctermfg = 8 })
hi('PmenuSbar', { ctermbg = 0 })
hi('StatusLine', { ctermfg = 7, ctermbg = 0, bold = true, cterm = { bold = true } })
hi('StatusLineNC', { ctermfg = 7, ctermbg = 0, cterm = nil })
hi('TabLineFill', { reverse = true, cterm = { reverse = true } })
hi('TabLineSel', { bold = true, cterm = { bold = true } })
hi('TermCursor', { reverse = true, cterm = { reverse = true } })
hi('WinBar', { bold = true, cterm = { bold = true } })
hi('WildMenu', { fg = 'Black', bg = 'Yellow', ctermfg = 'Black', ctermbg = 'Yellow' })

hi('VertSplit', { ctermfg = 0 })
hi('WinSeparator', { link = 'VertSplit' })
hi('WinBarNC', { link = 'WinBar' })
hi('EndOfBuffer', { link = 'NonText' })
hi('LineNrAbove', { link = 'LineNr' })
hi('LineNrBelow', { link = 'LineNr' })
hi('QuickFixLine', { ctermbg = 0 })
hi('CursorLineSign', { link = 'SignColumn' })
hi('CursorLineFold', { link = 'FoldColumn' })
hi('CurSearch', { link = 'Search' })
hi('PmenuKind', { link = 'Pmenu' })
hi('PmenuKindSel', { link = 'PmenuSel' })
hi('PmenuExtra', { link = 'Pmenu' })
hi('PmenuExtraSel', { link = 'PmenuSel' })
hi('Substitute', { link = 'Search' })
hi('Whitespace', { link = 'NonText' })
hi('MsgSeparator', { link = 'StatusLine' })
hi('NormalFloat', { link = 'Pmenu' })
hi('FloatBorder', { link = 'WinSeparator' })
hi('FloatTitle', { link = 'Title' })
hi('FloatFooter', { link = 'Title' })

hi('FloatShadow', { bg = 'Black', blend = 80 })
hi('FloatShadowThrough', { bg = 'Black', blend = 100 })
hi('RedrawDebugNormal', { reverse = true, cterm = { reverse = true } })
hi('RedrawDebugClear', { bg = 'Yellow', ctermbg = 'Yellow' })
hi('RedrawDebugComposed', { bg = 'Green', ctermbg = 'Green' })
hi('RedrawDebugRecompose', { bg = 'Red', ctermbg = 'Red' })
hi('Error', { ctermfg = 1, ctermbg = 0 })
hi('Todo', { ctermfg = 4 })

hi('String', { link = 'Constant' })
hi('Character', { link = 'Constant' })
hi('Number', { ctermfg = 7 })
hi('Boolean', { ctermfg = 5 })
hi('Float', { link = 'Number' })
hi('Function', { ctermfg = 3 })
hi('Conditional', { link = 'Statement' })
hi('Repeat', { link = 'Statement' })
hi('Label', { link = 'Statement' })
hi('Operator', { ctermfg = 7 })
hi('Keyword', { link = 'Statement' })
hi('Exception', { link = 'Statement' })
hi('Include', { link = 'PreProc' })
hi('Define', { link = 'PreProc' })
hi('Macro', { link = 'PreProc' })
hi('PreCondit', { link = 'PreProc' })
hi('StorageClass', { link = 'Type' })
hi('Structure', { link = 'Keyword' })
hi('Typedef', { link = 'Keyword' })
hi('Tag', { link = 'Special' })
hi('SpecialChar', { link = 'Special' })
hi('Delimiter', { link = 'Normal' })
hi('SpecialComment', { link = 'Special' })
hi('Debug', { link = 'Special' })

hi('DiagnosticError', { fg = 'Red', ctermfg = 1 })
hi('DiagnosticWarn', { fg = 'Orange', ctermfg = 3 })
hi('DiagnosticInfo', { fg = 'LightBlue', ctermfg = 4 })
hi('DiagnosticHint', { fg = 'LightGrey', ctermfg = 7 })
hi('DiagnosticOk', { fg = 'LightGreen', ctermfg = 10 })
hi('DiagnosticUnderlineError', { sp = 'Red', underline = true, cterm = { underline = true } })
hi('DiagnosticUnderlineWarn', { sp = 'Orange', underline = true, cterm = { underline = true } })
hi('DiagnosticUnderlineInfo', { sp = 'LightBlue', underline = true, cterm = { underline = true } })
hi('DiagnosticUnderlineHint', { sp = 'LightGrey', underline = true, cterm = { underline = true } })
hi('DiagnosticUnderlineOk', { sp = 'LightGreen', underline = true, cterm = { underline = true } })
hi('DiagnosticVirtualTextError', { link = 'DiagnosticError' })
hi('DiagnosticVirtualTextWarn', { link = 'DiagnosticWarn' })
hi('DiagnosticVirtualTextInfo', { link = 'DiagnosticInfo' })
hi('DiagnosticVirtualTextHint', { link = 'DiagnosticHint' })
hi('DiagnosticVirtualTextOk', { link = 'DiagnosticOk' })
hi('DiagnosticFloatingError', { link = 'DiagnosticError' })
hi('DiagnosticFloatingWarn', { link = 'DiagnosticWarn' })
hi('DiagnosticFloatingInfo', { link = 'DiagnosticInfo' })
hi('DiagnosticFloatingHint', { link = 'DiagnosticHint' })
hi('DiagnosticFloatingOk', { link = 'DiagnosticOk' })
hi('DiagnosticSignError', { link = 'DiagnosticError' })
hi('DiagnosticSignWarn', { link = 'DiagnosticWarn' })
hi('DiagnosticSignInfo', { link = 'DiagnosticInfo' })
hi('DiagnosticSignHint', { link = 'DiagnosticHint' })
hi('DiagnosticSignOk', { link = 'DiagnosticOk' })
hi('DiagnosticDeprecated', { sp = 'Red', strikethrough = true, cterm = { strikethrough = true } })

hi('DiagnosticUnnecessary', { link = 'Comment' })
hi('LspInlayHint', { link = 'NonText' })
hi('SnippetTabstop', { link = 'Visual' })

-- Text
hi('@markup.raw', { link = 'Comment' })
hi('@markup.link', { link = 'Identifier' })
hi('@markup.heading', { link = 'Title' })
hi('@markup.link.url', { link = 'Underlined' })
hi('@markup.underline', { link = 'Underlined' })
hi('@comment.todo', { link = 'Todo' })

-- Miscs
hi('@comment', { link = 'Comment' })
hi('@punctuation', { link = 'Delimiter' })

-- Constants
hi('@constant', { link = 'Constant' })
hi('@constant.builtin', { ctermfg = 6 })
hi('@constant.macro', { link = 'Define' })
hi('@keyword.directive', { link = 'Define' })
hi('@string', { link = 'String' })
hi('@string.escape', { link = 'SpecialChar' })
hi('@string.special', { link = 'SpecialChar' })
hi('@character', { link = 'Character' })
hi('@character.special', { link = 'SpecialChar' })
hi('@number', { link = 'Number' })
hi('@boolean', { link = 'Boolean' })
hi('@number.float', { link = 'Float' })

-- Functions
hi('@function', { link = 'Function' })
hi('@function.builtin', { link = 'Keyword' })
hi('@function.macro', { link = 'Macro' })
hi('@function.method', { link = 'Function' })
hi('@variable.parameter', { link = 'Identifier' })
hi('@variable.parameter.builtin', { link = 'Identifier' })
hi('@variable.member', { link = 'Identifier' })
hi('@property', { link = 'Identifier' })
hi('@attribute', { link = 'Identifier' })
hi('@attribute.builtin', { link = 'Identifier' })
hi('@constructor', { link = 'Function' })

-- Keywords
hi('@keyword.conditional', { link = 'Conditional' })
hi('@keyword.repeat', { link = 'Repeat' })
hi('@keyword.type', { link = 'Structure' })
hi('@label', { link = 'Label' })
hi('@operator', { link = 'Operator' })
hi('@keyword', { link = 'Keyword' })
hi('@keyword.exception', { link = 'Exception' })

hi('@variable', { link = 'Identifier' })
hi('@type', { link = 'Type' })
hi('@type.builtin', { link = 'Type' })
hi('@type.definition', { link = 'Typedef' })
hi('@module', { link = 'Identifier' })
hi('@keyword.import', { link = 'Include' })
hi('@keyword.directive', { link = 'PreProc' })
hi('@keyword.debug', { link = 'Debug' })
hi('@tag', { link = 'Tag' })
hi('@tag.builtin', { link = 'Special' })

-- LSP "SHIT" semantic tokens
hi('@lsp.type.class', { link = 'Structure' })
hi('@lsp.type.comment', { link = 'Comment' })
hi('@lsp.type.decorator', { link = 'Function' })
hi('@lsp.type.enum', { link = 'Structure' })
hi('@lsp.type.enumMember', { link = 'Constant' })
hi('@lsp.type.function', { link = 'Function' })
hi('@lsp.type.interface', { link = 'Structure' })
hi('@lsp.type.macro', { link = 'Macro' })
hi('@lsp.type.method', { link = 'Function' })
hi('@lsp.type.namespace', { link = 'Structure' })
hi('@lsp.type.parameter', { link = 'Identifier' })
hi('@lsp.type.property', { link = 'Identifier' })
hi('@lsp.type.struct', { link = 'Structure' })
hi('@lsp.type.type', { link = 'Type' })
hi('@lsp.type.typeParameter', { link = 'TypeDef' })
hi('@lsp.type.variable', { link = 'Identifier' })

hi('ColorColumn', { bg = 'DarkRed', ctermbg = 'DarkRed' })
hi('CursorColumn', { bg = 'Grey40', ctermbg = 'DarkGrey' })
hi('CursorLine', { ctermbg = 0 })
hi('CursorLineNr', { ctermfg = 3, ctermbg = 0, cterm = {} })
hi('DiffAdd', { bg = 'DarkBlue', ctermbg = 'DarkBlue' })
hi('DiffChange', { bg = 'DarkMagenta', ctermbg = 'DarkMagenta' })
hi('DiffDelete', { fg = 'Blue', bg = 'DarkCyan', bold = true, ctermfg = 'Blue', ctermbg = 'DarkCyan' })
hi('Directory', { ctermfg = 4 })
hi('FoldColumn', { fg = 'Cyan', bg = 'Grey', ctermfg = 'Cyan', ctermbg = 'DarkGrey' })
hi('Folded', { fg = 'Cyan', bg = 'DarkGrey', ctermfg = 'Cyan', ctermbg = 'DarkGrey' })
hi('LineNr', { ctermfg = 8 })
hi('MatchParen', { ctermfg = 8, ctermbg = nil, reverse = true, cterm = { reverse = true } })
hi('MoreMsg', { ctermfg = 2 })
hi('Pmenu', { ctermfg = 7, ctermbg = 0, cterm = nil })
hi('PmenuSel', { ctermfg = nil, ctermbg = nil, cterm = { reverse = true }, reverse = true })
hi('PmenuThumb', { ctermbg = 8 })
hi('Question', { ctermfg = 2 })
hi('Search', { ctermfg = nil, ctermbg = nil, cterm = { reverse = true }, reverse = true })
hi('SignColumn', { fg = 'Cyan', bg = 'Grey', ctermfg = 'Cyan', ctermbg = 'DarkGrey' })
hi('SpecialKey', { ctermfg = 4 })
hi('SpellBad', { underline = true, ctermbg = nil, cterm = { underline = true } })
hi('SpellCap', { underline = true, ctermbg = nil, cterm = { underline = true } })
hi('SpellLocal', { underline = true, ctermbg = nil, cterm = { underline = true } })
hi('SpellRare', { underline = true, ctermbg = nil, cterm = { underline = true } })
hi('TabLine',
    { bg = 'DarkGrey', underline = true, ctermfg = 'White', ctermbg = 'DarkGrey', cterm = { underline = true } })
hi('Title', { ctermfg = 3 })
hi('Visual', { ctermfg = nil, reverse = true, cterm = { reverse = true } })
hi('WarningMsg', { ctermfg = 1 })
hi('Comment', { ctermfg = 8 })
hi('Constant', { ctermfg = 2 })
hi('Special', { ctermfg = 7 })
hi('Identifier', { ctermfg = 7, cterm = nil })
hi('Statement', { ctermfg = 1 })
hi('PreProc', { ctermfg = 3 })
hi('Type', { ctermfg = 4 })
hi('Underlined', {})
hi('Ignore', { ctermfg = 0 })

-- Lua
hi("@constructor.lua", { ctermfg = 7 })

-- Cmp
hi('CmpItemAbbrMatch', { link = 'Normal' })
hi('CmpItemAbbrMatchFuzzy', { link = 'Normal' })
hi('CmpItemKind', { link = 'Keyword' })
hi('CmpItemKindFolder', { link = 'Directory' })
hi('CmpItemKindFunction', { link = 'Function' })
hi('CmpItemKindInterface', { link = 'Type' })
hi('CmpItemKindMethod', { link = 'Function' })
hi('CmpItemKindReference', { link = 'Special' })
hi('CmpItemKindText', { link = 'Identifier' })
hi('CmpItemKindVariable', { link = 'Identifier' })

-- Telescope
hi('TelescopeTitle', { link = 'Comment' })
